kind: batch
title: Demo batch with non-linear DAG

args:
  size_first: "4000"
  size_second: "5000"
  random_seed: "42"

defaults:
  preset: cpu-small

images:
  numpy:
    ref: image:${{ flow.project_id }}:v1.0
    dockerfile: ${{ flow.workspace }}/Dockerfile-batch
    context: ${{ flow.workspace }}

volumes:
  dataset:
    remote: storage:${{ flow.id }}/data
    mount: /data

tasks:
  - id: entry
    image: ubuntu
    bash:
      echo "This batch generates two numeric datasets and calculates the sum of averages."

  - id: generate_dataset_${{ matrix.size }}
    needs: [entry]
    image: ${{ images.numpy.ref }}
    strategy:
      matrix:
        # Problem #1: I can't list vars inside matrix.
        # I can list them explicitly, but then I'll have to type them manually in all other matrices and dependencies.
        size: [${{ args.size_first }}, ${{ args.size_second }}]
    volumes:
      - ${{ volumes.dataset.ref_rw }}
    python: |
      import numpy
      numpy.random.seed(${{ args.random_seed }})
      dataset = numpy.random.rand(${{ matrix.size }})
      numpy.save("/data/${{ matrix.size }}-${{ args.random_seed }}/dataset.npy", dataset)

  - id: avg_${{ matrix.size }}
    # Problem #2: I can't list dependencies with variables.
    # In this use-case I can go without explicit dependency, but the DAG may be more complex.
    needs: [generate_dataset_${{ args.size_first }}, generate_dataset_${{ args.size_second }}]
    image: ${{ images.numpy.ref }}
    strategy:
      matrix:
        size: [${{ args.size_first }}, ${{ args.size_second }}]
    volumes:
      - ${{ volumes.dataset.ref_ro }}
    python: |
      import numpy
      dataset = numpy.load("/data/${{ matrix.size }}-${{ args.random_seed }}/dataset.npy")
      avg = numpy.average(dataset)
      print(f"::set-output name=avg::{avg}")

  - id: sum
    image: ${{ images.numpy.ref }}
    # Problem #3: I can't find a way to retrieve results from all matrix jobs.
    # Vars in vars (like below) don't work.
    python: |
      result = ${{ needs.avg_${{ size_first }}.outputs.avg }} + ${{ needs.avg_${{ size_first }}.outputs.avg }}
      print(f"::set-output name=sum::{result}")

  - id: wrap_up
    needs: [sum]
    image: ubuntu
    bash:
      echo The sum of two datasets averages is equal to ${{ needs.sum.outputs.sum }}
